import os
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential, Model
from keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D
from keras import applications
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.optimizers import Adam
import matplotlib.pyplot as plt
from sklearn.preprocessing import MultiLabelBinarizer
from collections import defaultdict

# Define constants
DATA_DIR = '/your/local/folder/FFoCat'
RECIPE_FOOD_MAP = os.path.join(DATA_DIR, 'food_food_category_map.tsv')
TYPE_CLASSIFIER = 'multilabel'  # 'multiclass' or 'multilabel'
TRAIN_DIR = os.path.join(DATA_DIR, 'train')
VALID_DIR = os.path.join(DATA_DIR, 'valid')
IMG_WIDTH, IMG_HEIGHT = 299, 299
BATCH_SIZE = 16
EPOCHS = 100
INIT_LR = 1e-6

# Helper functions
def load_labels(recipe_food_map_path, dataset_path):
    recipe_food_map = np.genfromtxt(recipe_food_map_path, delimiter="\t", dtype=str)
    recipe_label = np.genfromtxt(os.path.join(dataset_path, 'label.tsv'), delimiter="_", dtype=str)
    recipe_ids = set(recipe_label[:, 0])
    recipe_food_dict = defaultdict(list)

    for recipe_food in recipe_food_map:
        if recipe_food[0] in recipe_ids:
            recipe_food_dict[recipe_food[0]].append(recipe_food[2])

    labels_list = sorted(set(food for foods in recipe_food_dict.values() for food in foods))
    return recipe_food_dict, labels_list

def show_history(history, metric, classifier_type):
    plt.plot(history.history[metric])
    plt.plot(history.history['val_' + metric])
    plt.title('Model ' + metric)
    plt.ylabel(metric)
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Validation'], loc='upper left')
    plt.savefig(os.path.join('history', metric + '_inceptionv3_' + classifier_type + '.png'))
    plt.close()

# Build labels dictionary
recipe_food_dict, labels_list = load_labels(RECIPE_FOOD_MAP, DATA_DIR)

# Image data generators
train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=25,
                                   width_shift_range=0.1,
                                   height_shift_range=0.1,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True,
                                   fill_mode="nearest")

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(TRAIN_DIR, target_size=(IMG_WIDTH, IMG_HEIGHT),
                                                    batch_size=BATCH_SIZE, class_mode='categorical')
validation_generator = test_datagen.flow_from_directory(VALID_DIR, target_size=(IMG_WIDTH, IMG_HEIGHT),
                                                        batch_size=BATCH_SIZE, class_mode='categorical')

# Model
base_model = applications.inception_v3.InceptionV3(weights='imagenet', include_top=False)
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(2048, activation='relu')(x)
x = Dropout(0.5)(x)

if TYPE_CLASSIFIER == 'multiclass':
    predictions = Dense(train_generator.num_classes, activation='softmax')(x)
else:
    predictions = Dense(len(labels_list), activation='sigmoid')(x)

model = Model(inputs=base_model.input, outputs=predictions)

# Compile the model
optimizer = Adam(lr=INIT_LR)
loss_func = 'categorical_crossentropy' if TYPE_CLASSIFIER == 'multiclass' else 'binary_crossentropy'
model.compile(optimizer=optimizer, loss=loss_func, metrics=['accuracy'])

# Train the model
callbacks = [EarlyStopping(patience=15), ModelCheckpoint('models/inceptionv3_' + TYPE_CLASSIFIER + '_best.h5', verbose=1, save_best_only=True)]
train_steps = len(train_generator)
val_steps = len(validation_generator)

history = model.fit_generator(train_generator, steps_per_epoch=train_steps, epochs=EPOCHS, verbose=1,
                              callbacks=callbacks, validation_data=validation_generator, validation_steps=val_steps)

model.save('models/inceptionv3_' + TYPE_CLASSIFIER + '_final.h5')

# Plot and save training history
show_history(history, 'loss', TYPE_CLASSIFIER)
show_history(history, 'accuracy', TYPE_CLASSIFIER)
